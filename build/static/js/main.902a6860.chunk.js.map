{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["dbUrl","outbound","getAll","axios","get","then","response","data","create","newObject","post","remove","id","delete","update","put","Notification","message","isError","className","Filter","filterText","handleFilterChange","value","onChange","PersonForm","onSubmit","newName","newNumber","handleNameChange","handleNumberChange","type","Person","person","deletePerson","name","number","onClick","Persons","persons","map","App","useState","setPersons","setNewName","setNewNumber","setFilterText","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","dbService","initialPersons","updateNumberOf","returnedPerson","p","setTimeout","catch","error","filter","clearInputs","filteredPersons","toLowerCase","includes","e","target","preventDefault","indexOf","window","confirm","find","newPerson","concat","personToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.902a6860.chunk.js","sourcesContent":["import axios from 'axios'\nconst dbUrl = '/api/persons'//'http://localhost:3001/persons'\n\nconst getAll = () => axios.get(dbUrl).then(response => response.data)\n\nconst create = (newObject) => axios.post(dbUrl, newObject).then(response => response.data)\n\nconst remove = (id) => axios.delete(`${dbUrl}/${id}`)\n\nconst update = (id, newObject) => axios.put(`${dbUrl}/${id}`, newObject).then(response => response.data)\n\nconst outbound = { getAll, create, remove, update }\n\nexport default outbound","import React, { useState, useEffect } from 'react'\nimport dbService from './services/persons'\n\nconst Notification = ({message, isError}) => {\n  if (message === null) {\n    return null\n  } else {\n    const className = isError?'error':'notification'\n    return (\n      <div className={className}>\n        {message}\n      </div>\n    )\n  }\n}\n\nconst Filter = ({filterText, handleFilterChange}) => (\n  <div>\n    filter shown with: <input value={filterText} onChange={handleFilterChange} />\n  </div>\n)\n\nconst PersonForm = ({onSubmit, newName, newNumber, handleNameChange, handleNumberChange}) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n        <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Person = ({person, deletePerson}) => (\n  <div>{person.name} {person.number} <button onClick={deletePerson}>delete</button></div>\n)\n\nconst Persons = ({persons, deletePerson}) => (\n  <div>\n    {persons.map(person => <Person person={person} key={person.id} deletePerson={() => deletePerson(person)} />)}\n  </div>\n)\n\nconst App = () => {\n  const [ persons, setPersons ] = useState( [] ) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterText, setFilterText ] = useState('')\n  const [ successMessage, setSuccessMessage ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  useEffect(() => {\n    dbService.getAll().then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  const addPerson = (e) => {\n    e.preventDefault()\n\n    const alreadyExists = persons.map(person => person.name).indexOf(newName) !== -1\n    if(alreadyExists) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with the new one?`)) {\n        updateNumberOf(persons.find(person => person.name === newName), newNumber)\n      }\n      return\n    }\n\n    const newPerson = { name: newName, number: newNumber }\n    dbService.create(newPerson)\n    .then(returnedPerson => {\n      setPersons(persons.concat(returnedPerson))\n      clearInputs()\n    })\n\n    setSuccessMessage(`Added ${newPerson.name}`) \n    setTimeout(() => setSuccessMessage(null), 3000)\n  }\n\n  const deletePerson = (personToDelete) => {\n    if(window.confirm(`Delete ${personToDelete.name}?`)) {\n      dbService.remove(personToDelete.id)//.then(response => console.log(response))\n      setPersons(persons.filter(person => person.id !== personToDelete.id))\n    }\n  }\n\n  const updateNumberOf = (person, newNumber) => {\n    dbService.update(person.id, { name: person.name, number: newNumber })\n      .then(returnedPerson => {\n        setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson))\n        setSuccessMessage(`Updated number of ${returnedPerson.name}`) \n        setTimeout(() => setSuccessMessage(null), 3000)\n      })\n      .catch(error => {\n        setErrorMessage(`Information of ${person.name}' was already removed from server`)\n        setTimeout(() => setErrorMessage(null), 3000)\n        setPersons(persons.filter(p => p.id !== person.id))\n      })\n\n    clearInputs()\n  }\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value)\n  }\n\n  const handleFilterChange = (e) => {\n    setFilterText(e.target.value)\n  }\n\n  const clearInputs = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(filterText.toLowerCase()));\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage} isError={false} />\n      <Notification message={errorMessage} isError={true} />\n      <Filter filterText={filterText} handleFilterChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm \n        onSubmit={addPerson} \n        newName={newName} \n        newNumber={newNumber} \n        handleNameChange={handleNameChange} \n        handleNumberChange={handleNumberChange} \n      />\n      <h3>Numbers</h3>\n      <Persons persons={filteredPersons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}